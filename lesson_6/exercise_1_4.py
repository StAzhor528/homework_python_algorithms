"""Задача из основ Python.
Дан список, содержащий искажённые данные с должностями и именами сотрудников:
['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАй', 'директор аэлита']
Известно, что имя сотрудника всегда в конце строки. Сформировать из этих имён и вывести на экран фразы вида:
'Привет, Игорь!' Подумать, как получить имена сотрудников из элементов списка, как привести их к корректному виду.
Можно ли при этом не создавать новый список?"""
from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff

    return wrapper


class Staff:
    __slots__ = ['lst']

    def __init__(self, lst):
        self.lst = lst


staff_1 = ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАЙ', 'директор аэлита']
staff_2 = ['инженер-конструктор Игорь', 'главный бухгалтер МАРИНА', 'токарь высшего разряда нИКОЛАЙ', 'директор аэлита']
s = Staff(staff_2)


# Исходное решение.
@decor
def names_1(lst):
    for employee in lst:  # Перебираем всех сотрудников с должностями.
        employee = employee.split(' ')  # Разбиваем на список по разделителю 'пробел'.
        name = employee.pop()  # Берем последнее значение из получившегося списка, так как знаем, что это имя.
        print(f'Привет, {name.title()}!')  # Печатаем результат с заглавной буквой имени.
    return


# Оптимизированное решение.
@decor
def names_2(lst):
    names = [employee.split(' ').pop().title() for employee in lst.lst]
    for name in names:
        print(f'Привет, {name}!')
    return


if __name__ == '__main__':
    res_1, mem_diff_1 = names_1(staff_1)
    res_2, mem_diff_2 = names_2(s)

    print(f'Затраченная память исходного кода - {mem_diff_1} Mib')
    print(f'Затраченная память после оптимизации - {mem_diff_2} Mib')

# В данном примере для оптимизации воспользовался ООП. Создал специальный класс, в котором использовал конструкцию
# __slots__ куда должен будет передаваться исходный список.
# Результат - сильное уменьшение используемой памяти.
